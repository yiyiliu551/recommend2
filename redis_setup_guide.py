#!/usr/bin/env python3 """ Redisandnumberqueryguide UserRedisqueryRecommendation systemnumber Author: Yang Liu """ import os import subprocess import sys import time from typing import List class RedisSetupGuide: """Redisandqueryguide""" def __init__(self): self.redis_port = 6379 self.redis_host = 'localhost' def check_system(self): """Checksystemenvironment""" print("🔍 Checksystemenvironment") print("=" * 50) # Checksystem import platform os_type = platform.system() print(f"system: {os_type}") # CheckisnoRedis redis_installed = self.is_redis_installed() print(f"RedisStatus/State: {'✅ ' if redis_installed else '❌ '}") # CheckisnoDocker docker_available = self.is_docker_available() print(f"DockerStatus/State: {'✅ ' if docker_available else '❌ '}") # CheckHomebrew (macOS) if os_type == "Darwin": homebrew_available = self.is_homebrew_available() print(f"HomebrewStatus/State: {'✅ ' if homebrew_available else '❌ '}") return { 'os_type': os_type, 'redis_installed': redis_installed, 'docker_available': docker_available, 'homebrew_available': homebrew_available if os_type == "Darwin" else False } def is_redis_installed(self) -> bool: """CheckRedisisno""" try: result = subprocess.run(['redis-cli', '--version'], capture_output=True, text=True, timeout=5) return result.returncode == 0 except: return False def is_docker_available(self) -> bool: """CheckDockerisno""" try: result = subprocess.run(['docker', '--version'], capture_output=True, text=True, timeout=5) return result.returncode == 0 except: return False def is_homebrew_available(self) -> bool: """CheckHomebrewisno""" try: result = subprocess.run(['brew', '--version'], capture_output=True, text=True, timeout=5) return result.returncode == 0 except: return False def is_redis_running(self) -> bool: """CheckRedisserviceisnoRun""" try: result = subprocess.run(['redis-cli', 'ping'], capture_output=True, text=True, timeout=5) return result.stdout.strip() == 'PONG' except: return False def show_installation_guide(self, system_info: dict): """guide""" print("\n🚀 Redisguide") print("=" * 50) os_type = system_info['os_type'] if system_info['redis_installed']: print("✅ Redis！") if self.is_redis_running(): print("✅ Redisservicepositiveat/inRun！") else: print("⚠️ RedisRun") self.show_start_guide() else: print("❌ Redis，selectstyle：") if os_type == "Darwin": # macOS self.show_macos_installation() elif os_type == "Linux": self.show_linux_installation() elif os_type == "Windows": self.show_windows_installation() if system_info['docker_available']: self.show_docker_installation() def show_macos_installation(self): """macOSguide""" print("\n🍎 macOSstyle：") print("style1: useHomebrew (recommend)") print("```bash") print("brew install redis") print("brew services start redis") print("```") print("\nstyle2: dynamicdown") print("```bash") print("wget http://download.redis.io/redis-stable.tar.gz") print("tar xzf redis-stable.tar.gz") print("cd redis-stable") print("make") print("./src/redis-server") print("```") def show_linux_installation(self): """Linuxguide""" print("\n🐧 Linuxstyle：") print("Ubuntu/Debian:") print("```bash") print("sudo apt update") print("sudo apt install redis-server") print("sudo systemctl start redis-server") print("sudo systemctl enable redis-server") print("```") print("\nCentOS/RHEL:") print("```bash") print("sudo yum install redis") print("sudo systemctl start redis") print("sudo systemctl enable redis") print("```") def show_windows_installation(self): """Windowsguide""" print("\n🪟 Windowsstyle：") print("style1: useWSL2 + Ubuntu") print("1. WSL2") print("2. at/inUbuntuRedis") print("\nstyle2: useRedis for Windows") print("1. down: https://github.com/microsoftarchive/redis/releases") print("2. decompressRunredis-server.exe") def show_docker_installation(self): """Dockerguide""" print("\n🐳 Dockerstyle (systempass):") print("```bash") print("#StartRedis") print("docker run -d -p 6379:6379 --name redis redis:latest") print("") print("#ValidateRun") print("docker exec -it redis redis-cli ping") print("```") def show_start_guide(self): """Startguide""" print("\n🚀 StartRedisservice：") print("macOS (Homebrew): brew services start redis") print("Linux (systemd): sudo systemctl start redis") print("dynamicStart: redis-server") print("Docker: docker start redis") def show_cli_usage_guide(self): """CLIuseguide""" print("\n💻 Redisuseguide") print("=" * 50) print("\n1. connectRedis:") print("```bash") print("redis-cli") print("#orfixedmainport") print("redis-cli -h localhost -p 6379") print("```") print("\n2. :") commands = [ ("PING", "Testconnect", "PONG"), ("KEYS *", "querykey", "keyList"), ("KEYS user:*", "queryUserclosekey", " key"), ("TYPE keyname", "querykeyclassmodel", "string/hash/list/set/zset"), ("GET keyname", "Getstringvalue", "returnvalue"), ("HGETALL keyname", "Gethashsegment", "returnsegmentandvalue"), ("ZREVRANGE keyname 0 10", "Getsorted setfront10individual", "minutenumberreturn"), ("LRANGE keyname 0 -1", "Getlistunit", "returnListinner"), ("TTL keyname", "querythroughhour", "secondnumber"), ("INFO", "queryRedisInformation", "serverInformation"), ("FLUSHDB", "emptywhenfrontDatabase", "OK (use!)"), ] print("```redis") for cmd, desc, result in commands: print(f"{cmd:25} # {desc}") print("```") print("\n3. exitoutRedis CLI:") print("```bash") print("EXIT") print("#or Ctrl+C") print("```") def show_recommendation_data_queries(self): """Recommendation systemnumberquerymethod""" print("\n🎯 Recommendation systemnumberqueryguide") print("=" * 50) print("\n📋 Recommendation systemKeyrules:") key_patterns = [ ("user:USER_ID:recommendations", "Usermostendrecommendresult", "zset", "100individualrecommendProduct"), ("user:USER_ID:profile", "UserInformation", "hash", "yearwait"), ("features:user:USER_ID", "UsermultipleTime windowFeatures", "hash", "1day/7day/30day"), ("features:item:ITEM_ID", "ProductFeaturesInformation", "hash", "priceclassdegreewait"), ("recall:USER_ID:candidates", "RecallCandidatesProduct", "zset", "10000individualCandidates"), ("coarse_rank:USER_ID:items", "Coarse rankingresult", "zset", "1000individualselect"), ("system:metrics:realtime", "systemReal-timeMetrics", "hash", "CTR/CVR/performancewait"), ("ab_test:current_results", "A/BTestresult", "string", "JSONstyle"), ] for pattern, desc, data_type, content in key_patterns: print(f"{pattern:35} # {desc} ({data_type}) - {content}") print("\n🔍 query:") queries = [ "#queryRecommendation systemclosekey", "KEYS *", "", "#queryUser recommendresult", "ZREVRANGE user:user_0001:recommendations 0 9 WITHSCORES", "", "#queryUserFeatures", "HGETALL features:user:user_0001", "", "#queryProductFeatures", "HGETALL features:item:item_00001", "", "#querysystemMetrics", "HGETALL system:metrics:realtime", "", "#queryUserRecallCandidates", "ZREVRANGE recall:user_0001:candidates 0 9 WITHSCORES", "", "#searchfixedUser number", "KEYS *user_0001*", "", "#queryA/BTestresult", "GET ab_test:current_results", ] print("```redis") for query in queries: print(query) print("```") def create_data_import_script(self): """CreatenumberImport""" print("\n📊 ImportRecommendation systemTestnumber") print("=" * 50) script_content = '''#!/usr/bin/env python3 """ willRecommendation systemTestnumberImporttrueRedis """ import redis import json import asyncio from complete_system_test import CompleteRecommendationSystemTest async def import_to_real_redis(): print("🔄 positiveat/inGenerateTestnumber...") # GenerateTestnumber test_system = CompleteRecommendationSystemTest() await test_system.run_complete_test() mock_redis = test_system.redis print("📡 connecttrueRedis...") try: real_redis = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True) real_redis.ping() print("✅ RedisconnectSuccess!") except Exception as e: print(f"❌ RedisconnectFailure: {e}") print("StartRedisservice") return print("🔄 ImportnumbertoRedis...") # Importnumber all_keys = mock_redis.keys() imported_count = 0 for key in all_keys: key_type = mock_redis.type(key) try: if key_type == 'string': value = mock_redis.get(key) real_redis.set(key, value) elif key_type == 'zset': items = mock_redis.zrevrange(key, 0, -1, withscores=True) mapping = {item: score for item, score in items} real_redis.zadd(key, mapping) elif key_type == 'hash': hash_data = mock_redis.hgetall(key) real_redis.hset(key, mapping=hash_data) elif key_type == 'list': list_data = mock_redis.lrange(key, 0, -1) for item in reversed(list_data): # real_redis.lpush(key, item) imported_count += 1 except Exception as e: print(f"⚠️ Importkey {key} Failure: {e}") print(f"✅ SuccessImport {imported_count} individualkeytoRedis!") print("\\n🎉 at/incanredis-cliquerynumber!") if __name__ == "__main__": asyncio.run(import_to_real_redis()) ''' with open('/Users/yangliu/Desktop/smallkimi/electronic-interview-projects/import_to_redis.py', 'w', encoding='utf-8') as f: f.write(script_content) print("✅ CreatenumberImport: import_to_redis.py") print("\nusemethod:") print("1. ensureRedisservicepositiveat/inRun") print("2. Run: python import_to_redis.py") print("3. useredis-cliquerynumber") def show_complete_workflow(self): """""" print("\n🔄 ") print("=" * 50) steps = [ ("1. Redis", [ "selectcombinesystem style", "macOS: brew install redis", "Linux: sudo apt install redis-server", "Docker: docker run -d -p 6379:6379 --name redis redis:latest" ]), ("2. StartRedisservice", [ "macOS: brew services start redis", "Linux: sudo systemctl start redis", "Docker: docker start redis", "dynamic: redis-server" ]), ("3. ValidateRedisRun", [ "redis-cli ping", "shouldreturn: PONG" ]), ("4. ImportRecommendation systemnumber", [ "cd /Users/yangliu/Desktop/smallkimi/electronic-interview-projects", "python import_to_redis.py", "WaitingnumberImportComplete" ]), ("5. querynumber", [ "redis-cli", "KEYS *", "ZREVRANGE user:user_0001:recommendations 0 9 WITHSCORES", "HGETALL features:user:user_0001", "EXIT" ]) ] for step_title, commands in steps: print(f"\n{step_title}:") for cmd in commands: print(f" {cmd}") def main(): """mainfunction""" guide = RedisSetupGuide() print("🗄️ Redisqueryguide") print("=" * 60) print("guidewillRedisqueryRecommendation systemnumber") # Checksystemenvironment system_info = guide.check_system() # guide guide.show_installation_guide(system_info) # CLIuseguide guide.show_cli_usage_guide() # Recommendation systemnumberquery guide.show_recommendation_data_queries() # CreatenumberImport guide.create_data_import_script() # guide.show_complete_workflow() print("\n" + "=" * 60) print("🎯 total:") print("1. StartRedis") print("2. Run python import_to_redis.py Importnumber") print("3. use redis-cli querynumber") print("4. Recommendation systemquerynumber") print("=" * 60) if __name__ == "__main__": main()