#!/usr/bin/env python3 """ Redis Data Explorer - queryRecommendation systemRedisnumber UserconnectqueryRedisStorage Recommendation systemnumber Author: Yang Liu """ import json import time from typing import Dict, List, Any, Optional from collections import defaultdict # usefrontTestGenerate Mock Redisnumber from complete_system_test import MockRedis, CompleteRecommendationSystemTest import asyncio class RedisDataExplorer: """Redisnumber""" def __init__(self): # LoadfrontTestGenerate number self.redis = None self.initialized = False async def initialize_data(self): """InitializeTestnumber""" if self.initialized: return print("🔄 InitializeRedisTestnumber...") test_system = CompleteRecommendationSystemTest() await test_system.run_complete_test() self.redis = test_system.redis self.initialized = True print("✅ RedisnumberInitializeComplete") async def show_all_keys(self): """key""" await self.initialize_data() print("\n" + "="*60) print("🔑 Redis KEYList") print("="*60) all_keys = self.redis.keys() # classmodelGroup key_groups = defaultdict(list) for key in sorted(all_keys): prefix = key.split(':')[0] if ':' in key else 'other' key_groups[prefix].append(key) for prefix, keys in key_groups.items(): print(f"\n📁 {prefix.upper()} ({len(keys)}individual):") for i, key in enumerate(keys[:10]): #front10individual print(f" {i+1:2d}. {key}") if len(keys) > 10: print(f"... {len(keys)-10} individualkey") print(f"\n📊 total: {len(all_keys)} individualkey") async def query_user_recommendations(self, user_id: str = None): """queryUserrecommendnumber""" await self.initialize_data() if not user_id: # findindividualrecommendnumber User rec_keys = [k for k in self.redis.keys() if ':recommendations' in k] if rec_keys: user_id = rec_keys[0].split(':')[1] print(f"\n" + "="*60) print(f"👤 Userrecommendnumberquery: {user_id}") print("="*60) # 1. mostendrecommendresult rec_key = f"user:{user_id}:recommendations" if rec_key in self.redis.keys(): recommendations = self.redis.zrevrange(rec_key, 0, -1, withscores=True) print(f"\n🎯 mostendrecommendresult ({len(recommendations)}individual):") print(" ProductID recommendminutenumber") print(" " + "-"*35) for i, (item, score) in enumerate(recommendations[:15], 1): print(f" {i:2d}. {item:15} {score:.4f}") if len(recommendations) > 15: print(f"... {len(recommendations)-15} individualrecommend") # 2. recommend detail_key = f"recommendations:user:{user_id}:details" if detail_key in self.redis.keys(): details_json = self.redis.get(detail_key) if details_json: details = json.loads(details_json) print(f"\n📋 recommend (front10individual):") print("ProductID minutenumber class CTR") print(" " + "-"*55) for item in details[:10]: print(f" {item['item_id']:12} {item['score']:.3f} {item['reason']:12} {item['category']:3} {item['predicted_ctr']:.3f}") # 3. RecallCandidates recall_key = f"recall:{user_id}:candidates" if recall_key in self.redis.keys(): candidates = self.redis.zrevrange(recall_key, 0, 9, withscores=True) print(f"\n🎲 RecallCandidates (Top10):") print("ProductID Recallminutenumber") print(" " + "-"*30) for item, score in candidates: print(f" {item:15} {score:.4f}") # 4. Coarse rankingresult coarse_key = f"coarse_rank:{user_id}:items" if coarse_key in self.redis.keys(): coarse_items = self.redis.zrevrange(coarse_key, 0, 9, withscores=True) print(f"\n🔄 Coarse rankingresult (Top10):") print("ProductID Coarse rankingminutenumber") print(" " + "-"*30) for item, score in coarse_items: print(f" {item:15} {score:.4f}") async def query_user_features(self, user_id: str = None): """queryUserFeaturesnumber""" await self.initialize_data() if not user_id: feature_keys = [k for k in self.redis.keys() if k.startswith('features:user:')] if feature_keys: user_id = feature_keys[0].split(':')[2] print(f"\n" + "="*60) print(f"👤 UserFeaturesnumber: {user_id}") print("="*60) # UserFeatures feature_key = f"features:user:{user_id}" if feature_key in self.redis.keys(): features = self.redis.hgetall(feature_key) print("\n📊 multipleTime windowBehavior:") print("Features value") print(" " + "-"*35) # minuteclassFeatures time_windows = ['1d', '7d', '30d'] metrics = ['clicks', 'views', 'purchases', 'browse_time'] for metric in metrics: print(f"\n 📈 {metric.upper()}:") for window in time_windows: key = f"{metric}_{window}" if key in features: print(f" {key:20}: {features[key]}") print("\n 📊 Conversion rate (CVR)Metrics:") rate_metrics = ['click_rate_7d', 'purchase_rate_7d', 'avg_order_value_30d'] for metric in rate_metrics: if metric in features: print(f" {metric:20}: {features[metric]}") print("\n 🏷️ UserTags:") label_metrics = ['activity_level', 'preferred_categories', 'preferred_brands'] for metric in label_metrics: if metric in features: print(f" {metric:20}: {features[metric]}") # UserInformation profile_key = f"user:{user_id}:profile" if profile_key in self.redis.keys(): profile = self.redis.hgetall(profile_key) print("\n👤 UserInformation:") print("attribute/property value") print(" " + "-"*35) for key, value in profile.items(): if key == 'registration_date': # Convert/Transformhour reg_time = datetime.fromtimestamp(float(value)).strftime('%Y-%m-%d') print(f" {key:20}: {reg_time}") else: print(f" {key:20}: {value}") async def query_item_features(self, item_id: str = None): """queryProductFeaturesnumber""" await self.initialize_data() if not item_id: feature_keys = [k for k in self.redis.keys() if k.startswith('features:item:')] if feature_keys: item_id = feature_keys[0].split(':')[2] print(f"\n" + "="*60) print(f"🛍️ ProductFeaturesnumber: {item_id}") print("="*60) feature_key = f"features:item:{item_id}" if feature_key in self.redis.keys(): features = self.redis.hgetall(feature_key) print("\n🏷️ attribute/property:") basic_attrs = ['category_id', 'brand_id', 'price', 'original_price'] for attr in basic_attrs: if attr in features: if 'price' in attr: print(f" {attr:20}: ¥{float(features[attr]):.2f}") else: print(f" {attr:20}: {features[attr]}") print("\n📊 multipleTime windowdegree:") time_windows = ['1d', '7d', '30d'] metrics = ['views', 'clicks', 'purchases'] for metric in metrics: print(f"\n 📈 {metric.upper()}:") for window in time_windows: key = f"{metric}_{window}" if key in features: print(f" {key:15}: {features[key]}") print("\n📈 Conversion rate (CVR)Metrics:") rate_metrics = ['ctr_7d', 'cvr_7d', 'popularity_score'] for metric in rate_metrics: if metric in features: print(f" {metric:20}: {features[metric]}") print("\n📦 inventory:") inventory_metrics = ['stock_count', 'sales_velocity', 'avg_rating', 'review_count'] for metric in inventory_metrics: if metric in features: print(f" {metric:20}: {features[metric]}") async def query_system_metrics(self): """querysystemMetrics""" await self.initialize_data() print("\n" + "="*60) print("📊 systemReal-timeMetrics") print("="*60) # systemMetrics system_key = "system:metrics:realtime" if system_key in self.redis.keys(): metrics = self.redis.hgetall(system_key) print("\n🎯 centerMetrics:") business_metrics = ['overall_ctr', 'overall_cvr', 'user_satisfaction_score', 'daily_active_users'] for metric in business_metrics: if metric in metrics: value = metrics[metric] if 'rate' in metric or 'ctr' in metric or 'cvr' in metric: print(f" {metric:25}: {float(value)*100:.2f}%") else: print(f" {metric:25}: {value}") print("\n⚡ performanceMetrics:") perf_metrics = ['cache_hit_rate', 'avg_response_time_ms', 'total_recommendations_served'] for metric in perf_metrics: if metric in metrics: value = metrics[metric] if 'rate' in metric: print(f" {metric:25}: {float(value)*100:.1f}%") elif 'time' in metric: print(f" {metric:25}: {value}ms") else: print(f" {metric:25}: {value}") # A/BTestresult ab_key = "ab_test:current_results" if ab_key in self.redis.keys(): ab_data = json.loads(self.redis.get(ab_key)) print("\n🧪 A/BTestresult:") print(f"Test: {ab_data['test_name']}") print(f"forgroupCTR: {ab_data['control_ctr']:.3f} ({ab_data['control_ctr']*100:.2f}%)") print(f"groupCTR: {ab_data['treatment_ctr']:.3f} ({ab_data['treatment_ctr']*100:.2f}%)") print(f"degree: {ab_data['improvement']}") print(f"kindamount: forgroup{ab_data['sample_size_control']}, group{ab_data['sample_size_treatment']}") print(f"degree: {ab_data['confidence']*100}%") print(f": {ab_data['status']}") # UserwithdegreeMetrics engagement_key = "engagement:metrics:current" if engagement_key in self.redis.keys(): engagement = self.redis.hgetall(engagement_key) print("\n👥 UserwithdegreeMetrics:") for metric, value in engagement.items(): if 'rate' in metric: print(f" {metric:25}: {float(value)*100:.2f}%") elif 'time' in metric: print(f"{metric:25}: {value}smallhour") else: print(f" {metric:25}: {value}") async def search_keys(self, pattern: str): """stylesearchkey""" await self.initialize_data() print(f"\n🔍 searchstyle: '{pattern}'") print("="*40) all_keys = self.redis.keys() matching_keys = [key for key in all_keys if pattern.lower() in key.lower()] if matching_keys: print(f"findto {len(matching_keys)} individual key:") for i, key in enumerate(sorted(matching_keys)[:20], 1): key_type = self.redis.type(key) if key_type == 'zset': count = self.redis.zcard(key) print(f"{i:2d}. {key:40} [sorted_set, {count}term]") elif key_type == 'hash': fields = self.redis.hgetall(key) print(f"{i:2d}. {key:40} [hash, {len(fields)}segment]") elif key_type == 'string': print(f" {i:2d}. {key:40} [string]") elif key_type == 'list': items = self.redis.lrange(key, 0, -1) print(f"{i:2d}. {key:40} [list, {len(items)}term]") else: print(f" {i:2d}. {key:40} [{key_type}]") if len(matching_keys) > 20: print(f"... {len(matching_keys)-20} individualterm") else: print("❌ findto key") async def inspect_key(self, key: str): """Checkindividualkey inner""" await self.initialize_data() if key not in self.redis.keys(): print(f"❌ Key '{key}' at/in") return print(f"\n🔍 Keyinner: {key}") print("="*60) key_type = self.redis.type(key) print(f"classmodel: {key_type}") if key_type == 'string': value = self.redis.get(key) print(f"value: {value}") # tryJSON try: json_data = json.loads(value) print("\n📋 JSONinner:") print(json.dumps(json_data, indent=2, ensure_ascii=False)) except: pass elif key_type == 'zset': items = self.redis.zrevrange(key, 0, -1, withscores=True) print(f"SortSet ({len(items)}individualterm):") print(" minutenumber") print(" " + "-"*35) for member, score in items[:20]: print(f" {member:20} {score:.4f}") if len(items) > 20: print(f"... {len(items)-20} individualterm") elif key_type == 'hash': fields = self.redis.hgetall(key) print(f"table ({len(fields)}individualsegment):") print("segment value") print(" " + "-"*50) for field, value in list(fields.items())[:20]: # disconnectvalue display_value = str(value)[:40] + "..." if len(str(value)) > 40 else str(value) print(f" {field:20} {display_value}") if len(fields) > 20: print(f"... {len(fields)-20} individualsegment") elif key_type == 'list': items = self.redis.lrange(key, 0, -1) print(f"List ({len(items)}individualterm):") for i, item in enumerate(items[:10]): print(f" {i}: {item}") if len(items) > 10: print(f"... {len(items)-10} individualterm") async def interactive_redis_explorer(): """styleRedisnumber""" explorer = RedisDataExplorer() print("🗄️ Redisnumber") print("=" * 50) print(":") print("1. keys - key") print("2. user - queryUserrecommendnumber") print("3. userinfo - queryUserFeaturesnumber") print("4. item - queryProductFeaturesnumber") print("5. metrics - querysystemMetrics") print("6. search - searchkey") print("7. inspect - querykeyinner") print("8. demo - Rundemo") print("9. exit - exitout") while True: print("\n" + "-"*50) choice = input("select (1-9):").strip() if choice == '1' or choice.lower() == 'keys': await explorer.show_all_keys() elif choice == '2' or choice.lower() == 'user': user_id = input("InputUserID (returnusedefault):").strip() await explorer.query_user_recommendations(user_id if user_id else None) elif choice == '3' or choice.lower() == 'userinfo': user_id = input("InputUserID (returnusedefault):").strip() await explorer.query_user_features(user_id if user_id else None) elif choice == '4' or choice.lower() == 'item': item_id = input("InputProductID (returnusedefault):").strip() await explorer.query_item_features(item_id if item_id else None) elif choice == '5' or choice.lower() == 'metrics': await explorer.query_system_metrics() elif choice == '6' or choice.lower() == 'search': pattern = input("Inputsearchstyle:").strip() if pattern: await explorer.search_keys(pattern) elif choice == '7' or choice.lower() == 'inspect': key = input("InputCheck key:").strip() if key: await explorer.inspect_key(key) elif choice == '8' or choice.lower() == 'demo': print("\n🎯 Rundemo...") await explorer.show_all_keys() await explorer.query_user_recommendations() await explorer.query_user_features() await explorer.query_item_features() await explorer.query_system_metrics() elif choice == '9' or choice.lower() == 'exit': print("👋 ！") break else: print("❌ select，newInput") if __name__ == "__main__": # connectRundemo，need import sys from datetime import datetime async def auto_demo(): explorer = RedisDataExplorer() print("🎯 dynamicdemoRedisnumberinner") print("=" * 50) # number await explorer.show_all_keys() await explorer.query_user_recommendations() await explorer.query_user_features() await explorer.query_item_features() await explorer.query_system_metrics() print("\n🔍 searchdemo:") await explorer.search_keys("user_0001") print("\n🔎 KeyinnerCheckdemo:") await explorer.inspect_key("user:user_0001:recommendations") asyncio.run(auto_demo())