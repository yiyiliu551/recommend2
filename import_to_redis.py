#!/usr/bin/env python3 """ willRecommendation systemTestnumberImporttrueRedis """ import redis import json import asyncio from complete_system_test import CompleteRecommendationSystemTest async def import_to_real_redis(): print("🔄 positiveat/inGenerateTestnumber...") # GenerateTestnumber test_system = CompleteRecommendationSystemTest() await test_system.run_complete_test() mock_redis = test_system.redis print("📡 connecttrueRedis...") try: real_redis = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True) real_redis.ping() print("✅ RedisconnectSuccess!") except Exception as e: print(f"❌ RedisconnectFailure: {e}") print("StartRedisservice") return print("🔄 ImportnumbertoRedis...") # Importnumber all_keys = mock_redis.keys() imported_count = 0 for key in all_keys: key_type = mock_redis.type(key) try: if key_type == 'string': value = mock_redis.get(key) real_redis.set(key, value) elif key_type == 'zset': items = mock_redis.zrevrange(key, 0, -1, withscores=True) mapping = {item: score for item, score in items} real_redis.zadd(key, mapping) elif key_type == 'hash': hash_data = mock_redis.hgetall(key) real_redis.hset(key, mapping=hash_data) elif key_type == 'list': list_data = mock_redis.lrange(key, 0, -1) for item in reversed(list_data): # real_redis.lpush(key, item) imported_count += 1 except Exception as e: print(f"⚠️ Importkey {key} Failure: {e}") print(f"✅ SuccessImport {imported_count} individualkeytoRedis!") print("\n🎉 at/incanredis-cliquerynumber!") if __name__ == "__main__": asyncio.run(import_to_real_redis())